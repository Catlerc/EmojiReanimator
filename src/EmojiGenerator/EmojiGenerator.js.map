{"version":3,"file":"EmojiGenerator.js","sourceRoot":"","sources":["EmojiGenerator.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  FrameGenerator,\r\n  LinearGenerator,\r\n  Reverse,\r\n  RotationGenerator,\r\n  TurnGenerator,\r\n  TurnGeneratorFlex\r\n} from \"./FrameGenerator.js\"\r\nimport {AnimatedImage, Frame, FrameType, ImageUpdateFrame, Pixels} from \"../Image/AnimatedImage.js\"\r\nimport {Options} from \"../Application.js\"\r\nimport {RelativeImage} from \"../Image/RelativeImage/RelativeImage.js\"\r\nimport {Utils} from \"../Utils/Utils.js\"\r\nimport {RelativeFabricImage} from \"../Image/RelativeImage/RelativeFabricImage.js\"\r\nimport {FabricCanvas} from \"../FabricWrapper/FabricCanvas.js\"\r\nimport {FlipHorizontal, FlipVertical, ImagePreprocess} from \"./ImagePreprocess.js\"\r\n\r\nexport class EmojiGenerator {\r\n  constructor(\r\n    public namePrefix: string,\r\n    public frameGenerator: FrameGenerator,\r\n    public rotation: number = 0,\r\n    public preprocess: ImagePreprocess[] = []\r\n  ) {\r\n  }\r\n\r\n  private static prepareCanvas(canvas: FabricCanvas) {\r\n    canvas.clear()\r\n    canvas.setBackgroundColor(\"#FFFFFF\", null)\r\n  }\r\n\r\n  async generate(image: AnimatedImage, options: Options, cancelCheck: () => boolean): Promise<AnimatedImage> {\r\n    let timeline: Array<Frame> = []\r\n    const relativeImage = new RelativeImage(image)\r\n\r\n    relativeImage.rescaleToFit(options.width, options.height)\r\n\r\n    let currentImage: RelativeFabricImage\r\n    let lastFrameTime: number\r\n    for (const frame of image.timeline) {\r\n      if (cancelCheck()) break\r\n\r\n      const index = image.timeline.indexOf(frame)\r\n      if (frame.type !== FrameType.End) {\r\n        const canvas = Utils.createCanvas(options.width, options.height)\r\n        relativeImage.attach(canvas)\r\n        const timeNormalized = index / (image.timeline.length - 1)\r\n\r\n        if (frame.type == FrameType.ImageUpdate) {\r\n          const imageUpdateFrame = frame as ImageUpdateFrame\r\n          let pixelsRaw = imageUpdateFrame.image\r\n          this.preprocess.forEach(preprocess => {\r\n            pixelsRaw = preprocess(pixelsRaw)\r\n          })\r\n          const pixels = pixelsRaw\r\n          currentImage = await relativeImage.getFabricImageForFrame(pixels.toImageData())//pixels.toImageData())\r\n        }\r\n\r\n        EmojiGenerator.prepareCanvas(canvas)\r\n\r\n        const relativeFabricImages = await this.frameGenerator(currentImage, timeNormalized)\r\n        relativeFabricImages.forEach(img => canvas.add(img.underlying))\r\n\r\n        canvas.renderAll()\r\n\r\n        const imageData = canvas.contextContainer.getImageData(0, 0, options.width, options.height)\r\n\r\n        EmojiGenerator.prepareCanvas(canvas)\r\n\r\n        const imageForRotation = await Utils.fabricImageFromDataUrl(Utils.imageDataToDataUrl(imageData))\r\n        imageForRotation.set({\r\n          originX: \"center\",\r\n          originY: \"center\",\r\n          angle: this.rotation,\r\n          left: canvas.width / 2,\r\n          top: canvas.height / 2\r\n        })\r\n        canvas.add(imageForRotation)\r\n        canvas.renderAll()\r\n\r\n        timeline.push(new ImageUpdateFrame(Pixels.fromImageData(canvas.contextContainer.getImageData(0, 0, options.width, options.height)), frame.time))\r\n        lastFrameTime = frame.time\r\n      } else\r\n        timeline.push(frame)\r\n    }\r\n\r\n\r\n    return new AnimatedImage(options.width, options.height, timeline)\r\n  }\r\n\r\n\r\n}\r\n\r\n"]}