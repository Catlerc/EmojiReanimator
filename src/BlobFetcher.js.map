{"version":3,"file":"BlobFetcher.js","sourceRoot":"","sources":["BlobFetcher.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAC,MAAM,EAAC,MAAM,mBAAmB,CAAA;AAExC;IAAA;IAsBA,CAAC;IArBc,qBAAS,GAAtB,UAAuB,GAAW;;;gBAChC,WAAO,KAAK,CAAC,GAAG,CAAC;yBACd,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC;yBACjC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CACjB,OAAK,CAAA,CAAC,UAAA,CAAC,IAAI,OAAA,MAAM,CAAC,IAAI,EAAQ,EAAnB,CAAmB,CAAC,EAAA;;;KACnC;IAEY,sBAAU,GAAvB,UAAwB,GAAW;;;;gBAC3B,OAAO,GAAY,IAAI,OAAO,CAAC,sCAAsC,GAAG,GAAG,EAAE;oBACjF,OAAO,EAAE,CAAC,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;iBAC3B,CAAC,CAAA;gBACF,WAAO,KAAK,CAAC,OAAO,CAAC;yBAClB,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC;yBACjC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CACjB,OAAK,CAAA,CAAC,UAAA,CAAC,IAAI,OAAA,MAAM,CAAC,IAAI,EAAQ,EAAnB,CAAmB,CAAC,EAAA;;;KACnC;IAEY,iBAAK,GAAlB,UAAmB,GAAW;;;;;4BACV,WAAM,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAA;;wBAArC,SAAS,GAAG,SAAyB;wBACpC,KAAA,CAAA,KAAA,SAAS,CAAA,CAAC,MAAM,CAAA;wBAAC,WAAM,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAA;4BAAlD,WAAO,cAAiB,SAA0B,EAAC,EAAA;;;;KACpD;IACH,kBAAC;AAAD,CAAC,AAtBD,IAsBC","sourcesContent":["import {Option} from \"./Utils/Option.js\"\r\n\r\nexport class BlobFetcher {\r\n  static async justFetch(url: string): Promise<Option<Blob>> {\r\n    return fetch(url)\r\n      .then(response => response.blob())\r\n      .then(Option.some)\r\n      .catch(_ => Option.none<Blob>())\r\n  }\r\n\r\n  static async proxyFetch(url: string): Promise<Option<Blob>> {\r\n    const request: Request = new Request(\"https://cors-anywhere.herokuapp.com/\" + url, {\r\n      headers: [[\"Origin\", \"*\"]]\r\n    })\r\n    return fetch(request)\r\n      .then(response => response.blob())\r\n      .then(Option.some)\r\n      .catch(_ => Option.none<Blob>())\r\n  }\r\n\r\n  static async fetch(url: string): Promise<Option<Blob>> {\r\n    const maybeBlob = await this.justFetch(url)\r\n    return maybeBlob.orElse(await this.proxyFetch(url))\r\n  }\r\n}"]}