{"version":3,"file":"Either.js","sourceRoot":"","sources":["Either.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA;IAAA;IAiBA,CAAC;IANC,yBAAI,GAAJ,UAAQ,MAAsB,EAAE,OAAwB;QACtD,IAAI,IAAI,CAAC,MAAM;YACb,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;;YAExB,OAAO,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;IAC9B,CAAC;IACH,iBAAC;AAAD,CAAC,AAjBD,IAiBC;AAGD;IAAgC,wBAAgB;IAO9C,cAAY,KAAQ;QAApB,YACE,iBAAO,SAER;QARD,WAAK,GAAM,SAAS,CAAA;QAEpB,YAAM,GAAY,IAAI,CAAA;QACtB,aAAO,GAAY,KAAK,CAAA;QAItB,KAAI,CAAC,IAAI,GAAG,KAAK,CAAA;;IACnB,CAAC;IAED,sBAAO,GAAP,UAAW,IAAoB;QAC7B,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;IAClC,CAAC;IAED,uBAAQ,GAAR,UAAY,IAAqB;QAC/B,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IAC5B,CAAC;IACH,WAAC;AAAD,CAAC,AAnBD,CAAgC,UAAU,GAmBzC;;AAED;IAAiC,yBAAgB;IAO/C,eAAY,KAAQ;QAApB,YACE,iBAAO,SAER;QATD,UAAI,GAAM,SAAS,CAAA;QAGnB,YAAM,GAAY,KAAK,CAAA;QACvB,aAAO,GAAY,IAAI,CAAA;QAIrB,KAAI,CAAC,KAAK,GAAG,KAAK,CAAA;;IACpB,CAAC;IAED,uBAAO,GAAP,UAAW,IAAoB;QAC7B,OAAO,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;IAC9B,CAAC;IAED,wBAAQ,GAAR,UAAY,IAAqB;QAC/B,OAAO,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAA;IACpC,CAAC;IACH,YAAC;AAAD,CAAC,AAnBD,CAAiC,UAAU,GAmB1C","sourcesContent":["abstract class EitherPart<L, R> {\r\n  left: L\r\n  right: R\r\n\r\n  isLeft: boolean\r\n  isRight: boolean\r\n\r\n  abstract mapLeft<B>(func: (left: L) => B): EitherPart<B, R>\r\n\r\n  abstract mapRight<B>(func: (right: R) => B): EitherPart<L, B>\r\n\r\n  fold<B>(ifLeft: (left: L) => B, ifRight: (right: R) => B) {\r\n    if (this.isLeft)\r\n      return ifLeft(this.left)\r\n    else\r\n      return ifRight(this.right)\r\n  }\r\n}\r\n\r\n\r\nexport class Left<L, R> extends EitherPart<L, R> {\r\n  left: L\r\n  right: R = undefined\r\n\r\n  isLeft: boolean = true\r\n  isRight: boolean = false\r\n\r\n  constructor(value: L) {\r\n    super()\r\n    this.left = value\r\n  }\r\n\r\n  mapLeft<B>(func: (left: L) => B): EitherPart<B, R> {\r\n    return new Left(func(this.left))\r\n  }\r\n\r\n  mapRight<B>(func: (right: R) => B): EitherPart<L, B> {\r\n    return new Left(this.left)\r\n  }\r\n}\r\n\r\nexport class Right<L, R> extends EitherPart<L, R> {\r\n  left: L = undefined\r\n  right: R\r\n\r\n  isLeft: boolean = false\r\n  isRight: boolean = true\r\n\r\n  constructor(value: R) {\r\n    super()\r\n    this.right = value\r\n  }\r\n\r\n  mapLeft<B>(func: (left: L) => B): EitherPart<B, R> {\r\n    return new Right(this.right)\r\n  }\r\n\r\n  mapRight<B>(func: (right: R) => B): EitherPart<L, B> {\r\n    return new Right(func(this.right))\r\n  }\r\n}\r\n\r\nexport type Either<L, R> = Left<L, R> | Right<L, R>"]}