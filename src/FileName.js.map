{"version":3,"file":"FileName.js","sourceRoot":"","sources":["FileName.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,MAAM,EAAC,MAAM,mBAAmB,CAAA;AAExC;IACE,kBAA2B,IAAY,EAAS,SAAiB;QAAtC,SAAI,GAAJ,IAAI,CAAQ;QAAS,cAAS,GAAT,SAAS,CAAQ;IACjE,CAAC;IAEM,uBAAc,GAArB,UAAsB,IAAU,EAAE,GAAW;QAC3C,IAAM,KAAK,GAAG,cAAc,CAAA;QAC5B,IAAM,YAAY,GAAG,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAA;QACvD,IAAM,SAAS,GAAG,YAAY,CAAC,OAAO,CAAC,UAAA,OAAO,IAAI,OAAA,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAA5B,CAA4B,CAAC,CAAA;QAE/E,OAAO,SAAS,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAA3C,CAA2C,CAAC,CAAA;IAC3E,CAAC;IAEM,gBAAO,GAAd,UAAe,GAAW;QACxB,IAAM,KAAK,GAAG,sBAAsB,CAAA;QACpC,IAAM,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;QAChC,IAAM,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAA;QAC9C,IAAM,cAAc,GAAG,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAA;QACnD,OAAO,SAAS,CAAC,OAAO,CAAC,UAAA,IAAI,IAAI,OAAA,cAAc,CAAC,GAAG,CAAC,UAAA,SAAS,IAAI,OAAA,IAAI,QAAQ,CAAC,IAAI,EAAE,SAAS,CAAC,EAA7B,CAA6B,CAAC,EAA9D,CAA8D,CAAC,CAAA;IAClG,CAAC;IAEM,sBAAa,GAApB,UAAqB,IAAU;QAC7B,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;IAChC,CAAC;IACH,eAAC;AAAD,CAAC,AAvBD,IAuBC","sourcesContent":["import {Option} from \"./Utils/Option.js\"\r\n\r\nexport class FileName {\r\n  private constructor(public name: string, public extension: string) {\r\n  }\r\n\r\n  static fromBlobAndUrl(blob: Blob, url: string): Option<FileName> {\r\n    const regex = /.+\\/?([^.]+)/\r\n    const maybeMatches = Option.fromValue(url.match(regex))\r\n    const maybeName = maybeMatches.flatMap(matcher => Option.fromValue(matcher[1]))\r\n\r\n    return maybeName.map(name => new FileName(name, blob.type.split('/')[1]))\r\n  }\r\n\r\n  static fromUrl(url: string): Option<FileName> {\r\n    const regex = /.+\\/?([^.]+)\\.?(.+)?/\r\n    const matches = url.match(regex)\r\n    const maybeName = Option.fromValue(matches[1])\r\n    const maybeExtension = Option.fromValue(matches[2])\r\n    return maybeName.flatMap(name => maybeExtension.map(extension => new FileName(name, extension)))\r\n  }\r\n\r\n  static blobExtension(blob: Blob) {\r\n    return blob.type.split('/')[1]\r\n  }\r\n}"]}