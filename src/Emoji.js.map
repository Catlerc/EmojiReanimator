{"version":3,"file":"Emoji.js","sourceRoot":"","sources":["Emoji.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAC,UAAU,EAAC,MAAM,aAAa,CAAA;AACtC,OAAO,EAAoC,aAAa,EAAC,MAAM,oBAAoB,CAAA;AACnF,OAAO,EAAgB,SAAS,EAAmB,MAAM,oBAAoB,CAAC;AAC9E,OAAO,EAAU,KAAK,EAAC,MAAM,aAAa,CAAC;AAc3C,MAAM,UAAgB,WAAW,CAC7B,OAAgB,EAChB,QAAuB,EACvB,IAAiG;;;;;;oBAE7F,KAAK,GAAG,QAAQ,CAAA;oBACpB,IAAI,OAAO,CAAC,cAAc,KAAK,SAAS;wBAAE,KAAK,GAAG,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,cAAc,CAAC,MAAM,EAAE,OAAO,CAAC,cAAc,CAAC,GAAG,CAAC,CAAA;oBAG3H,MAAM,GAAG,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,CAAC,CAAA;oBAC1D,UAAU,GAAG,IAAI,UAAU,CAAC;wBAC9B,OAAO,EAAE,CAAC;wBACV,OAAO,EAAE,GAAG;wBACZ,UAAU,EAAE,QAAQ;wBACpB,KAAK,EAAE,OAAO,CAAC,KAAK;wBACpB,MAAM,EAAE,OAAO,CAAC,MAAM;wBACtB,YAAY,EAAE,wBAAwB;qBACzC,CAAC,CAAA;oBAEI,aAAa,GAAG,IAAI,aAAa,CAAC,KAAK,CAAC,CAAA;oBAC9C,aAAa,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;oBAC5B,aAAa,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,CAAC,CAAA;oBAGhD,UAAU,GAAG,CAAC;;;yBAAE,CAAA,UAAU,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAA;oBACrD,KAAK,GAAG,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAA;oBAClC,SAAS,GAAG,KAAK,CAAC,QAAQ,CAAC,UAAU,GAAG,CAAC,CAAC,CAAA;oBAC1C,KAAK,GAAG,CAAC,SAAS,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAA;oBAC5C,cAAc,GAAG,UAAU,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,GAAC,CAAC,CAAC,CAAA;yBAEzD,CAAA,KAAK,CAAC,IAAI,IAAI,SAAS,CAAC,WAAW,CAAA,EAAnC,cAAmC;oBACxB,WAAM,aAAa,CAAC,sBAAsB,CAAC,KAAyB,CAAC,EAAA;;oBAAhF,QAAQ,GAAG,SAAqE,CAAA;;;oBAGpF,MAAM,CAAC,KAAK,EAAE,CAAA;oBACd,MAAM,CAAC,kBAAkB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAA;oBAE1C,WAAM,IAAI,CAAC,MAAM,EAAE,QAAQ,EAAE,cAAc,CAAC,EAAA;;oBAA5C,SAA4C,CAAA;oBAE5C,MAAM,CAAC,SAAS,EAAE,CAAA;oBAElB,UAAU,CAAC,QAAQ,CACf,MAAM,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,CAAC,EACzE,EAAC,KAAK,EAAE,KAAK,EAAC,CACjB,CAAA;;;oBApB4D,UAAU,EAAE,CAAA;;wBAuB7E,WAAO,IAAI,OAAO,CACd,UAAA,OAAO;wBACH,UAAU,CAAC,EAAE,CAAC,UAAU,EAAE,OAAO,CAAC,CAAA;wBAClC,UAAU,CAAC,MAAM,EAAE,CAAA;oBACvB,CAAC,CAAC,EAAA;;;;CACT","sourcesContent":["import {GifEncoder} from \"./Vendor.js\"\r\nimport {FabricCanvas, RelativeFabricImage, RelativeImage} from \"./RelativeImage.js\"\r\nimport {AnimatedImage, FrameType, ImageUpdateFrame} from \"./AnimatedImage.js\";\r\nimport {Seconds, Utils} from \"./Domain.js\";\r\n\r\n\r\ninterface ExpandTimelineOptions {\r\n    length: Seconds,\r\n    fps: number\r\n}\r\n\r\ninterface Options {\r\n    width: number,\r\n    height: number,\r\n    expandTimeline?: ExpandTimelineOptions\r\n}\r\n\r\nexport async function createEmoji(\r\n    options: Options,\r\n    imageRaw: AnimatedImage,\r\n    func: (canvas: FabricCanvas, image: RelativeFabricImage, timeNormalized: number) => Promise<void>\r\n) {\r\n    let image = imageRaw\r\n    if (options.expandTimeline !== undefined) image = image.expandTimeline(options.expandTimeline.length, options.expandTimeline.fps)\r\n\r\n\r\n    const canvas = Utils.createCanvas(options.width, options.height)\r\n    const gifEncoder = new GifEncoder({\r\n        workers: 2,\r\n        quality: 100,\r\n        background: 0xFFFFFF,\r\n        width: options.width,\r\n        height: options.height,\r\n        workerScript: \"./vendor/gif.worker.js\"\r\n    })\r\n\r\n    const relativeImage = new RelativeImage(image)\r\n    relativeImage.attach(canvas)\r\n    relativeImage.rescaleToFit(options.width, options.height)\r\n\r\n    let oldImage: RelativeFabricImage\r\n    for (let frameIndex = 0; frameIndex < image.timeline.length - 1; frameIndex++) {\r\n        const frame = image.timeline[frameIndex]\r\n        const nextFrame = image.timeline[frameIndex + 1]\r\n        const delay = (nextFrame.time - frame.time) * 1000\r\n        const timeNormalized = frameIndex / (image.timeline.length-1)\r\n\r\n        if (frame.type == FrameType.ImageUpdate) {\r\n            oldImage = await relativeImage.getFabricImageForFrame(frame as ImageUpdateFrame)\r\n        }\r\n\r\n        canvas.clear()\r\n        canvas.setBackgroundColor('#FFFFFF', null)\r\n\r\n        await func(canvas, oldImage, timeNormalized)\r\n\r\n        canvas.renderAll()\r\n\r\n        gifEncoder.addFrame(\r\n            canvas.contextContainer.getImageData(0, 0, options.width, options.height),\r\n            {delay: delay}\r\n        )\r\n    }\r\n\r\n    return new Promise(\r\n        resolve => {\r\n            gifEncoder.on('finished', resolve)\r\n            gifEncoder.render()\r\n        })\r\n}\r\n"]}