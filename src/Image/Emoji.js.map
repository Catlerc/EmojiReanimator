{"version":3,"file":"Emoji.js","sourceRoot":"","sources":["Emoji.ts"],"names":[],"mappings":"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","sourcesContent":["import {GifEncoder} from \"../Vendor.js\"\r\nimport {AnimatedImage, FrameType, ImageUpdateFrame, Pixels} from \"./AnimatedImage.js\"\r\nimport {Milliseconds} from \"../Domain.js\"\r\nimport {Option} from \"../Utils/Option.js\"\r\nimport {Options} from \"../Application.js\"\r\nimport {Utils} from \"../Utils/Utils.js\"\r\nimport {EmojiGenerator} from \"../EmojiGenerator/EmojiGenerator.js\"\r\nimport {EmojiSizeWarning} from \"../EmojiSizeWarning.js\"\r\n\r\n\r\ninterface GifEncoderFrameOptions {\r\n  delay: Milliseconds\r\n}\r\n\r\ninterface GifEncoder {\r\n  freeWorkers: Worker[]\r\n  running: string\r\n\r\n  abort(): void\r\n\r\n  addFrame(imageData: ImageData, options: GifEncoderFrameOptions): void\r\n\r\n  on(eventName: string, func: (event: any) => any): void\r\n\r\n  render(): void\r\n}\r\n\r\nexport enum EmojiState {\r\n  Idle,\r\n  Rendering,\r\n  Stopping\r\n}\r\n\r\nexport class Emoji {\r\n  renderedGif: Option<Blob> = Option.none<Blob>()\r\n  imageElement: Option<HTMLImageElement> = Option.none<HTMLImageElement>()\r\n  renderId: number = 0\r\n  overSize: boolean = false\r\n\r\n  constructor(public generator: EmojiGenerator, private emojiSizeWarning: EmojiSizeWarning) {\r\n  }\r\n\r\n  attach(imageElement: HTMLImageElement) {\r\n    this.imageElement = Option.some(imageElement)\r\n    imageElement.onmouseenter = () => {\r\n      if (this.overSize) {\r\n        this.emojiSizeWarning.updatePosition(imageElement)\r\n        this.renderedGif.forEach(gif => {\r\n          if (gif.size > 128 * 1024)\r\n            this.emojiSizeWarning.setText(`Размер эмодзи превышает лимит slack'a (${Math.ceil(gif.size / 1024)} Kb > 128 kb).`)\r\n          else\r\n            this.emojiSizeWarning.hide()\r\n        })\r\n        if (!this.renderedGif.nonEmpty()) this.emojiSizeWarning.hide()\r\n      } else\r\n        this.emojiSizeWarning.hide()\r\n\r\n    }\r\n    imageElement.onmouseleave = () => this.emojiSizeWarning.hide()\r\n  }\r\n\r\n  updateAttachedImageElement() {\r\n    this.imageElement.forEach(\r\n      imageElement => this.renderedGif.forEach(gif => {\r\n        imageElement.src = Utils.imageBlobToDataUrl(gif)\r\n      })\r\n    )\r\n  }\r\n\r\n  private static cleanup(gifEncoder: GifEncoder) {\r\n    gifEncoder.freeWorkers.forEach(worker => worker.terminate())\r\n  }\r\n\r\n  async render(options: Options): Promise<boolean> {\r\n    this.setOverSize(false)\r\n    const currentRenderId = Math.floor(Math.random() * 99999999999)\r\n    this.renderId = currentRenderId\r\n\r\n    return new Promise<boolean>(resolve =>\r\n      options.sourceImage.forEach(async imageOptions => {\r\n        let image = imageOptions.image\r\n        options.expandTimeline.map(expandTimelineOptions =>\r\n          image = image.expandTimeline(expandTimelineOptions.length, expandTimelineOptions.fps)\r\n        )\r\n\r\n        const gifEncoder: GifEncoder = new GifEncoder({\r\n          workers: 2,\r\n          quality: 100,\r\n          background: 0xFFFFFF,\r\n          width: options.width,\r\n          height: options.height,\r\n          workerScript: \"./vendor/gif.worker.js\"\r\n        })\r\n\r\n        const animatedImage = await this.generator.generate(image, options, () => this.renderId != currentRenderId)\r\n        if (this.renderId != currentRenderId) {\r\n          Emoji.cleanup(gifEncoder)\r\n          resolve(false)\r\n        }\r\n        for (let index = 0; index < animatedImage.timeline.length - 1; index++) {\r\n          const frame = animatedImage.timeline[index] as ImageUpdateFrame\r\n          const nextFrame = animatedImage.timeline[index + 1]\r\n          const delay = (nextFrame.time - frame.time) * 1000\r\n          gifEncoder.addFrame(\r\n            frame.image.toImageData(),\r\n            {delay: delay}\r\n          )\r\n        }\r\n\r\n        gifEncoder.on(\"finished\", (gif: Blob) => {\r\n          Emoji.cleanup(gifEncoder)\r\n          if (this.renderId == currentRenderId) {\r\n            this.renderedGif = Option.some(gif)\r\n            resolve(true)\r\n          } else resolve(false)\r\n        })\r\n        gifEncoder.render()\r\n      })\r\n    )\r\n  }\r\n\r\n  checkSize() {\r\n    this.imageElement.forEach(imageElement => {\r\n      this.renderedGif.forEach(gif => {\r\n        const maxSize = 128 * 1024 //128 Kb\r\n        this.setOverSize(gif.size > maxSize)\r\n      })\r\n    })\r\n  }\r\n\r\n  setOverSize(overSize: boolean) {\r\n    this.imageElement.forEach(imageElement => {\r\n      if (overSize)\r\n        imageElement.setAttribute(\"sizefailure\", null)\r\n      else\r\n        imageElement.removeAttribute(\"sizefailure\")\r\n    })\r\n  }\r\n}\r\n"]}