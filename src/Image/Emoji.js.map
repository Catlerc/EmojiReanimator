{"version":3,"file":"Emoji.js","sourceRoot":"","sources":["Emoji.ts"],"names":[],"mappings":"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","sourcesContent":["import {GifEncoder} from \"../Vendor.js\"\r\nimport {AnimatedImage, FrameType, ImageUpdateFrame} from \"./AnimatedImage.js\"\r\nimport {Milliseconds} from \"../Domain.js\"\r\nimport {Option} from \"../Utils/Option.js\"\r\nimport {Options} from \"../Application.js\"\r\nimport {Utils} from \"../Utils/Utils.js\"\r\nimport {EmojiGenerator} from \"../EmojiGenerator/EmojiGenerator.js\"\r\nimport {EmojiSizeWarning} from \"../EmojiSizeWarning.js\"\r\n\r\n\r\ninterface GifEncoderFrameOptions {\r\n  delay: Milliseconds\r\n}\r\n\r\ninterface GifEncoder {\r\n  addFrame(imageData: ImageData, options: GifEncoderFrameOptions): void\r\n\r\n  on(eventName: string, func: (event: any) => any): void\r\n\r\n  render(): void\r\n}\r\n\r\n\r\nexport class Emoji {\r\n  renderedGif: Option<Blob> = Option.none()\r\n  renderedName: Option<string> = Option.none()\r\n  imageElement: Option<HTMLImageElement> = Option.none()\r\n\r\n  constructor(private generator: EmojiGenerator, private emojiSizeWarning: EmojiSizeWarning) {\r\n  }\r\n\r\n  attach(imageElement: HTMLImageElement) {\r\n    this.imageElement = Option.some(imageElement)\r\n    imageElement.onmouseenter = () => {\r\n      this.emojiSizeWarning.updatePosition(imageElement)\r\n      this.renderedGif.forEach(gif => {\r\n        if (gif.size > 128 * 1024)\r\n          this.emojiSizeWarning.setText(`The size of the gif (${Math.ceil(gif.size / 1024)} Kb) is larger than\\nthe maximum size of Slack emoji (128 Kb).`)\r\n        else\r\n          this.emojiSizeWarning.hide()\r\n      })\r\n      if (!this.renderedGif.nonEmpty()) this.emojiSizeWarning.hide()\r\n    }\r\n    imageElement.onmouseleave = () => this.emojiSizeWarning.hide()\r\n  }\r\n\r\n  updateAttachedImageElement() {\r\n    this.imageElement.forEach(\r\n      imageElement => this.renderedGif.forEach(gif => {\r\n        imageElement.src = Utils.imageBlobToDataUrl(gif)\r\n      })\r\n    )\r\n  }\r\n\r\n  async render(options: Options) {\r\n    // noinspection ES6MissingAwait\r\n    options.sourceImage.forEach(async imageOptions => {\r\n      let image = imageOptions.image\r\n      options.expandTimeline.map(expandTimelineOptions =>\r\n        image = image.expandTimeline(expandTimelineOptions.length, expandTimelineOptions.fps)\r\n      )\r\n\r\n      const gifEncoder: GifEncoder = new GifEncoder({\r\n        workers: 2,\r\n        quality: 100,\r\n        background: 0xFFFFFF,\r\n        width: options.width,\r\n        height: options.height,\r\n        workerScript: \"./vendor/gif.worker.js\"\r\n      })\r\n\r\n      const animatedImage = await this.generator.generate(image, options)\r\n\r\n      for (let index = 0; index < animatedImage.timeline.length - 1; index++) {\r\n        const frame = animatedImage.timeline[index] as ImageUpdateFrame\r\n        const nextFrame = animatedImage.timeline[index + 1]\r\n        const delay = (nextFrame.time - frame.time) * 1000\r\n        gifEncoder.addFrame(\r\n          frame.image,\r\n          {delay: delay}\r\n        )\r\n      }\r\n      this.renderedName = options.sourceImage.map(imageOptions => imageOptions.name + \"_\" + this.generator.namePrefix)\r\n\r\n      gifEncoder.on(\"finished\", (gif: Blob) => {\r\n        this.renderedGif = Option.some(gif)\r\n        this.afterRender()\r\n      })\r\n      gifEncoder.render()\r\n    })\r\n  }\r\n\r\n  afterRender() {\r\n    this.updateAttachedImageElement()\r\n    this.imageElement.forEach(imageElement => {\r\n      this.renderedGif.forEach(gif => {\r\n        const maxSize = 128 * 1024 //128 Kb\r\n        if (gif.size > maxSize) {\r\n          imageElement.setAttribute(\"sizefailure\", null)\r\n        } else imageElement.removeAttribute(\"sizefailure\")\r\n      })\r\n    })\r\n  }\r\n}\r\n"]}