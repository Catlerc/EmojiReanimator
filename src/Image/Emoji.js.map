{"version":3,"file":"Emoji.js","sourceRoot":"","sources":["Emoji.ts"],"names":[],"mappings":"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","sourcesContent":["import {GifEncoder} from \"../Vendor.js\"\r\nimport {AnimatedImage, FrameType, ImageUpdateFrame, Pixels} from \"./AnimatedImage.js\"\r\nimport {Milliseconds} from \"../Domain.js\"\r\nimport {Option} from \"../Utils/Option.js\"\r\nimport {Options} from \"../Application.js\"\r\nimport {Utils} from \"../Utils/Utils.js\"\r\nimport {EmojiGenerator} from \"../EmojiGenerator/EmojiGenerator.js\"\r\nimport {EmojiSizeWarning} from \"../EmojiSizeWarning.js\"\r\n\r\n\r\ninterface GifEncoderFrameOptions {\r\n  delay: Milliseconds\r\n}\r\n\r\ninterface GifEncoder {\r\n  freeWorkers: Worker[]\r\n  running: string\r\n\r\n  abort(): void\r\n\r\n  addFrame(imageData: ImageData, options: GifEncoderFrameOptions): void\r\n\r\n  on(eventName: string, func: (event: any) => any): void\r\n\r\n  render(): void\r\n}\r\n\r\nexport enum EmojiState {\r\n  Idle,\r\n  Rendering,\r\n  Stopping\r\n}\r\n\r\nexport class Emoji {\r\n  renderedGif: Option<Blob> = Option.none<Blob>()\r\n  imageElement: Option<HTMLImageElement> = Option.none<HTMLImageElement>()\r\n  state: EmojiState = EmojiState.Idle\r\n  gifEncoder: Option<GifEncoder> = Option.none()\r\n\r\n  constructor(public generator: EmojiGenerator, private emojiSizeWarning: EmojiSizeWarning) {\r\n  }\r\n\r\n  attach(imageElement: HTMLImageElement) {\r\n    this.imageElement = Option.some(imageElement)\r\n    imageElement.onmouseenter = () => {\r\n      this.emojiSizeWarning.updatePosition(imageElement)\r\n      this.renderedGif.forEach(gif => {\r\n        if (gif.size > 128 * 1024)\r\n          this.emojiSizeWarning.setText(`The size of the gif (${Math.ceil(gif.size / 1024)} Kb) is larger than\\nthe maximum size of Slack emoji (128 Kb).`)\r\n        else\r\n          this.emojiSizeWarning.hide()\r\n      })\r\n      if (!this.renderedGif.nonEmpty()) this.emojiSizeWarning.hide()\r\n    }\r\n    imageElement.onmouseleave = () => this.emojiSizeWarning.hide()\r\n  }\r\n\r\n  updateAttachedImageElement() {\r\n    this.imageElement.forEach(\r\n      imageElement => this.renderedGif.forEach(gif => {\r\n        imageElement.src = Utils.imageBlobToDataUrl(gif)\r\n      })\r\n    )\r\n  }\r\n\r\n  async stopRender(): Promise<void> {\r\n    return new Promise<void>(resolve => {\r\n      const refreshIntervalId = setInterval(() => {\r\n        this.gifEncoder.forEach(gifEncoder => gifEncoder.abort)\r\n        if (this.state == EmojiState.Idle) {\r\n          this.gifEncoder.forEach(gifEncoder => gifEncoder.freeWorkers.forEach(worker => worker.terminate()))\r\n          clearInterval(refreshIntervalId)\r\n          resolve()\r\n        } else this.state = EmojiState.Stopping\r\n      }, 100)\r\n    })\r\n  }\r\n\r\n  async render(options: Options): Promise<boolean> {\r\n    this.state = EmojiState.Rendering\r\n    return new Promise<boolean>(resolve =>\r\n      options.sourceImage.forEach(async imageOptions => {\r\n        let image = imageOptions.image\r\n        options.expandTimeline.map(expandTimelineOptions =>\r\n          image = image.expandTimeline(expandTimelineOptions.length, expandTimelineOptions.fps)\r\n        )\r\n\r\n        const gifEncoder: GifEncoder = new GifEncoder({\r\n          workers: 2,\r\n          quality: 100,\r\n          background: 0xFFFFFF,\r\n          width: options.width,\r\n          height: options.height,\r\n          workerScript: \"./vendor/gif.worker.js\"\r\n        })\r\n        this.gifEncoder = Option.some(gifEncoder)\r\n\r\n        const animatedImage = await this.generator.generate(image, options, () => this.state == EmojiState.Stopping)\r\n        if (this.state == EmojiState.Stopping) {\r\n          this.state = EmojiState.Idle\r\n          resolve(false)\r\n        }\r\n        for (let index = 0; index < animatedImage.timeline.length - 1; index++) {\r\n          const frame = animatedImage.timeline[index] as ImageUpdateFrame\r\n          const nextFrame = animatedImage.timeline[index + 1]\r\n          const delay = (nextFrame.time - frame.time) * 1000\r\n          gifEncoder.addFrame(\r\n            frame.image.toImageData(),\r\n            {delay: delay}\r\n          )\r\n        }\r\n\r\n        gifEncoder.on(\"finished\", (gif: Blob) => {\r\n          this.renderedGif = Option.some(gif)\r\n          this.state = EmojiState.Idle\r\n          gifEncoder.freeWorkers.forEach(worker => worker.terminate())\r\n          resolve(true)\r\n        })\r\n        gifEncoder.render()\r\n      })\r\n    )\r\n  }\r\n\r\n  checkSize() {\r\n    this.imageElement.forEach(imageElement => {\r\n      this.renderedGif.forEach(gif => {\r\n        const maxSize = 128 * 1024 //128 Kb\r\n        if (gif.size > maxSize) {\r\n          imageElement.setAttribute(\"sizefailure\", null)\r\n        } else imageElement.removeAttribute(\"sizefailure\")\r\n      })\r\n    })\r\n  }\r\n}\r\n"]}