{"version":3,"file":"Emoji.js","sourceRoot":"","sources":["Emoji.ts"],"names":[],"mappings":"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","sourcesContent":["import {GifEncoder} from \"../Vendor.js\"\r\nimport {AnimatedImage, FrameType, ImageUpdateFrame} from \"./AnimatedImage.js\"\r\nimport {Milliseconds} from \"../Domain.js\"\r\nimport {Option} from \"../Utils/Option.js\"\r\nimport {Options} from \"../Application.js\"\r\nimport {Utils} from \"../Utils/Utils.js\"\r\nimport {EmojiGenerator} from \"../EmojiGenerator/EmojiGenerator.js\"\r\n\r\n\r\ninterface GifEncoderFrameOptions {\r\n  delay: Milliseconds\r\n}\r\n\r\ninterface GifEncoder {\r\n  addFrame(imageData: ImageData, options: GifEncoderFrameOptions): void\r\n\r\n  on(eventName: string, func: (event: any) => any): void\r\n\r\n  render(): void\r\n}\r\n\r\n\r\nexport class Emoji {\r\n  renderedGif: Option<Blob> = Option.none()\r\n  renderedName: Option<string> = Option.none()\r\n  imageElement: Option<HTMLImageElement> = Option.none()\r\n\r\n  constructor(private generator: EmojiGenerator) {\r\n  }\r\n\r\n  attach(imageElement: HTMLImageElement) {\r\n    this.imageElement = Option.some(imageElement)\r\n  }\r\n\r\n  updateAttachedImageElement() {\r\n    this.imageElement.forEach(\r\n      imageElement => this.renderedGif.forEach(gif => {\r\n        imageElement.src = Utils.imageBlobToDataUrl(gif)\r\n        if (gif.size > 128 * 1024)\r\n          imageElement.setAttribute(\"sizefailure\", null)\r\n        else\r\n          imageElement.removeAttribute(\"sizefailure\")\r\n      })\r\n    )\r\n  }\r\n\r\n  async render(\r\n    options: Options,\r\n    imageRaw: AnimatedImage\r\n  ) {\r\n    let image = imageRaw\r\n    options.expandTimeline.map(expandTimelineOptions =>\r\n      image = image.expandTimeline(expandTimelineOptions.length, expandTimelineOptions.fps)\r\n    )\r\n\r\n    const gifEncoder: GifEncoder = new GifEncoder({\r\n      workers: 2,\r\n      quality: 100,\r\n      background: 0xFFFFFF,\r\n      width: options.width,\r\n      height: options.height,\r\n      workerScript: \"./vendor/gif.worker.js\"\r\n    })\r\n\r\n    const animatedImage = await this.generator.generate(image, options)\r\n\r\n    for (let index = 0; index < animatedImage.timeline.length - 1; index++) {\r\n      const frame = animatedImage.timeline[index] as ImageUpdateFrame\r\n      const nextFrame = animatedImage.timeline[index + 1]\r\n      const delay = (nextFrame.time - frame.time) * 1000\r\n      gifEncoder.addFrame(\r\n        frame.image,\r\n        {delay: delay}\r\n      )\r\n    }\r\n    this.renderedName = options.name.map(name => name + \"_\" + this.generator.namePrefix)\r\n\r\n    return new Promise(\r\n      resolve => {\r\n        gifEncoder.on(\"finished\", (gif: Blob) => {\r\n          this.renderedGif = Option.some(gif)\r\n          this.updateAttachedImageElement()\r\n          resolve(gif)\r\n        })\r\n        gifEncoder.render()\r\n      })\r\n  }\r\n}\r\n"]}